<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
          "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      https://docs.oracle.com/javase/specs/jls/se11/html/index.html

    - the Sun Code Conventions at https://www.oracle.com/java/technologies/javase/codeconventions-contents.html

    - the Javadoc guidelines at
      https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html

    - the JDK Api documentation https://docs.oracle.com/en/java/javase/11/

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  https://checkstyle.org (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.
  To suppress certain violations please review suppression filters.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
  <property name="severity" value="error"/>

  <property name="fileExtensions" value="java, properties, xml"/>

  <!-- Excludes all 'module-info.java' files              -->
  <!-- See https://checkstyle.org/config_filefilters.html -->
  <module name="BeforeExecutionExclusionFileFilter">
    <property name="fileNamePattern" value="module\-info\.java$"/>
  </module>

  <!-- https://checkstyle.org/config_filters.html#SuppressionFilter -->
  <module name="SuppressionFilter">
    <property name="file" value="${org.checkstyle.sun.suppressionfilter.config}" default="checkstyle-suppressions.xml" />
    <property name="optional" value="true"/>
  </module>

  <module name="NewlineAtEndOfFile"/>
  <module name="FileTabCharacter"/>
  <module name="RegexpSingleline">
    <property name="format" value="\s+$"/>
    <property name="minimum" value="0"/>
    <property name="maximum" value="0"/>
    <property name="message" value="Line has trailing spaces."/>
  </module>

  <module name="SuppressWarningsFilter"/>
  <module name="TreeWalker">
    <!-- No javadoc requirements
    <module name="InvalidJavadocPosition"/>
    <module name="JavadocMethod"/>
    <module name="JavadocType"/>
    <module name="JavadocVariable"/>
    <module name="JavadocStyle"/>
    <module name="MissingJavadocMethod"/>
    -->

    <!-- Enables @SuppressWarnings Support                -->
    <module name="SuppressWarningsHolder"/>

    <!-- No naming requirements               
    <module name="ConstantName"/>
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName"/>
    <module name="MemberName"/>
    <module name="MethodName"/>
    <module name="PackageName"/>
    <module name="ParameterName"/>
    <module name="StaticVariableName"/>
    <module name="TypeName"/>
    -->

    <!-- Checks for imports                              -->
    <module name="AvoidStarImport"/>
    <module name="IllegalImport"/>
    <module name="RedundantImport"/>
    <module name="UnusedImports">
      <property name="processJavadoc" value="false"/>
    </module>

    <!-- Checks for Size Violations.                    -->
    <!-- See https://checkstyle.org/config_sizes.html -->
    <!-- <module name="MethodLength"/> -->
    <module name="ParameterNumber"/>

    <!-- No qhitespace needed
    <module name="EmptyForIteratorPad"/>
    <module name="GenericWhitespace"/>
    <module name="MethodParamPad"/>
    <module name="NoWhitespaceAfter"/>
    <module name="NoWhitespaceBefore"/>
    <module name="OperatorWrap"/>
    <module name="ParenPad"/>
    <module name="TypecastParenPad"/>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround"/>
     -->

    <!-- Modifier Checks                                    -->
    <!-- See https://checkstyle.org/config_modifiers.html -->
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>

    <!-- Checks for blocks. You know, those {}'s         -->
    <!-- See https://checkstyle.org/config_blocks.html -->
    <module name="AvoidNestedBlocks"/>
    <module name="EmptyBlock"/>
    <module name="LeftCurly"/>
    <module name="NeedBraces"/>
    <module name="RightCurly"/>

    <!-- Checks for class design                       
    <module name="DesignForExtension"/>-->
    <module name="FinalClass"/>
    <module name="HideUtilityClassConstructor"/>
    <module name="InterfaceIsType"/>

    <!-- Miscellaneous other checks.
    <module name="ArrayTypeStyle"/>
    <module name="FinalParameters"/>
    <module name="UpperEll"/>-->
    <module name="TodoComment"/>
    <module name="TrailingComment"/>

    <!-- https://checkstyle.org/config_filters.html#SuppressionXpathFilter -->
    <module name="SuppressionXpathFilter">
      <property name="file" value="${org.checkstyle.sun.suppressionxpathfilter.config}" default="checkstyle-xpath-suppressions.xml" />
      <property name="optional" value="true"/>
    </module>

    <!-- Coding taken from checkstyle-checks.xml -->
    <module name="ArrayTrailingComma"/>
    <module name="AvoidDoubleBraceInitialization"/>
    <module name="AvoidInlineConditionals"/>
    <module name="AvoidNoArgumentSuperConstructorCall"/>
    <module name="ConstructorsDeclarationGrouping"/>
    <module name="CovariantEquals"/>
    <module name="DeclarationOrder"/>
    <module name="DefaultComesLast"/>
    <module name="EmptyStatement"/>
    <module name="EqualsAvoidNull"/>
    <module name="EqualsHashCode"/>
    <module name="ExplicitInitialization"/>
    <module name="FallThrough"/>
    <module name="FinalLocalVariable"/>
    <module name="HiddenField">
      <property name="ignoreConstructorParameter" value="true"/>
      <property name="ignoreSetter" value="true"/>
      <property name="setterCanReturnItsClass" value="true"/>
    </module>
    <module name="IllegalCatch">
      <property name="illegalClassNames"
                value="java.lang.Exception,
                       java.lang.Throwable,
                       java.lang.RuntimeException,
                       java.lang.NullPointerException"/>
    </module>
    <module name="IllegalInstantiation">
      <property name="classes"
                value="org.xml.sax.SAXException, org.xml.sax.SAXParseException,
                       org.apache.commons.beanutils.ConversionException,
                       org.antlr.v4.runtime.misc.ParseCancellationException,
                       java.lang.StringBuffer"/>
    </module>
    <module name="IllegalThrows"/>
    <module name="IllegalToken">
      <property name="tokens" value="LABELED_STAT"/>
      <property name="tokens" value="LITERAL_NATIVE"/>
      <property name="tokens" value="LITERAL_VOLATILE"/>
      <property name="tokens" value="LITERAL_ASSERT"/>
    </module>
    <module name="IllegalTokenText">
      <property name="tokens" value="STRING_LITERAL"/>
      <property name="format" value="^(US-ASCII|ISO-8859-1|UTF-8|UTF-16BE|UTF-16LE|UTF-16)$"/>
      <property name="ignoreCase" value="true"/>
    </module>
    <module name="IllegalType">
      <property name="illegalClassNames"
                value="java.util.HashSet, HashSet, java.util.LinkedHashMap, LinkedHashMap,
                       java.util.TreeMap, TreeMap, java.util.HashMap, HashMap,
                       java.util.LinkedHashSet, LinkedHashSet, java.util.TreeSet, TreeSet,
                       java.lang.StringBuffer, StringBuffer"/>
    </module>
    <module name="InnerAssignment"/>
    <module name="MagicNumber"/>
    <module name="MatchXpath">
      <property name="query" value="//CLASS_DEF[@text!='Checker' and @text!='Main']
      //LITERAL_CATCH//METHOD_CALL[.//IDENT[@text = 'printStackTrace']]/.."/>
      <message key="matchxpath.match" value="Avoid using 'printStackTrace'."/>
    </module>
    <module name="MatchXpath">
      <property name="query" value="//METHOD_DEF/MODIFIERS//
            ANNOTATION[./IDENT[@text='Test']]/ANNOTATION_MEMBER_VALUE_PAIR
            [./IDENT[@text='expected']]"/>
      <message key="matchxpath.match" value="Avoid using 'expected' attribute in Test annotation."/>
    </module>
    <module name="MatchXpath">
      <property name="query" value="//ANNOTATION[./IDENT[@text='Issue']]"/>
      <message key="matchxpath.match" value="Avoid using @Issue annotation."/>
    </module>
    <module name="MatchXpath">
      <property name="id" value="noUsageOfGetFileContentsMethod"/>
      <property name="query" value="//CLASS_DEF[
               ./EXTENDS_CLAUSE[./IDENT[@text='AbstractCheck'
                                     or @text='AbstractJavadocCheck'
                                     or @text='AbstractSuperCheck'
                                     or @text='AbstractClassCouplingCheck'
                                     or @text='AbstractNameCheck'
                                     or @text='AbstractParenPadCheck']]
               and .//METHOD_CALL[.//IDENT[@text = 'getFileContents']]]"/>
      <message key="matchxpath.match" value="Avoid using getFileContents method in
                                            AbstractCheck subclasses."/>
    </module>
    <!-- until https://github.com/checkstyle/checkstyle/issues/5234 -->
    <module name="MatchXpath">
      <property name="id" value="MatchXPathBranchContains"/>
      <property name="query" value="//METHOD_CALL//DOT[.//IDENT[@text = 'branchContains']]"/>
      <message key="matchxpath.match"
               value="Avoid using deprecated method 'DetailAst.branchContains()'."/>
    </module>
    <module name="MatchXpath">
      <property name="id" value="singleLineCommentStartWithSpace"/>
      <property name="query"
                value="//SINGLE_LINE_COMMENT[./COMMENT_CONTENT[not(starts-with(@text, ' '))
                       and not(@text = '\n') and not(ends-with(@text, '//\n'))
                       and not(@text = '\r') and not(ends-with(@text, '//\r'))
                       and not(@text = '\r\n') and not(ends-with(@text, '//\r\n'))]]"/>
      <message key="matchxpath.match" value="Single line comment text should start with space."/>
    </module>
    <module name="MatchXpath">
      <property name="id" value="blockCommentStartWithSpace"/>
      <property name="query"
                value="//BLOCK_COMMENT_BEGIN[./COMMENT_CONTENT[matches(@text, '\\n+ *\*[^\\n ]\S')
                       or matches(@text, '^[^\* \\n]') or matches(@text, '\\r+ *\*[^\\r ]\S')
                       or matches(@text, '^[^\* \\r]') or matches(@text, '\\r\\n+ *\*[^\\r\\n ]\S')
                       or matches(@text, '^[^\* \\r\\n]') and not(starts-with(@text, '*'))]]"/>
      <message key="matchxpath.match"
               value="Block comment text should start with space after asterisk."/>
    </module>
    <module name="MatchXpath">
      <property name="id" value="deprecatedWithoutSince"/>
      <property name="query"
               value="//ANNOTATION[./IDENT[@text='Deprecated']
                      and not(./ANNOTATION_MEMBER_VALUE_PAIR/IDENT[@text='since'])]"/>
      <message key="matchxpath.match"
             value="@Deprecated annotation should contain 'since' property."/>
    </module>
    <module name="MatchXpath">
      <property name="query" value="//COMMENT_CONTENT[contains(@text, '@noinspection')
                      and not(contains(@text, '@noinspectionreason'))]"/>
      <message key="matchxpath.match"
               value="'@noinspection' Javadoc tags should be accompanied by a
                     '@noinspectionreason' tag, explaining why we suppressed inspection."/>
    </module>
    <module name="MatchXpath">
      <property name="id" value="settersHaveSinceTag"/>
      <property name="query"
                value="//CLASS_DEF[./IDENT[ends-with(@text, 'Check') or ends-with(@text, 'Filter')]
                and not (./MODIFIERS/ABSTRACT)]
                /OBJBLOCK/METHOD_DEF[./IDENT[starts-with(@text, 'set')]
                and ./MODIFIERS/LITERAL_PUBLIC
                and ./TYPE/LITERAL_VOID
                and ./MODIFIERS/BLOCK_COMMENT_BEGIN
                /COMMENT_CONTENT[not(contains(@text, '@since'))]]"/>
      <message key="matchxpath.match"
               value="All property setters of a module should contain a '@since' tag."/>
    </module>
    <module name="MatchXpath">
      <property name="id" value="exampleTestsExtendAbstractExamplesModuleTestSupport"/>
      <property name="query"
                value="//CLASS_DEF[./IDENT[ends-with(@text, 'ExamplesTest')]
                and ./MODIFIERS/LITERAL_PUBLIC
                and ./EXTENDS_CLAUSE/IDENT[not(@text='AbstractExamplesModuleTestSupport')]]"/>
      <message key="matchxpath.match"
               value="All example test classes should extend AbstractExamplesModuleTestSupport."/>
    </module>
    <module name="MissingCtor">
      <!--
        we will not use that fanatic validation, extra code is not good
        But this Check will exist as it was created by community demand.
      -->
      <property name="severity" value="ignore"/>
    </module>
    <module name="MissingSwitchDefault"/>
    <module name="ModifiedControlVariable"/>
    <module name="MultipleStringLiterals"/>
    <module name="MultipleVariableDeclarations"/>
    <module name="NestedForDepth">
      <property name="max" value="2"/>
    </module>
    <module name="NestedIfDepth">
      <property name="max" value="3"/>
    </module>
    <module name="NestedTryDepth"/>
    <module name="NoArrayTrailingComma">
      <!-- This Check is conflicting with ArrayTrailingComma -->
      <property name="severity" value="ignore"/>
    </module>
    <module name="NoClone"/>
    <module name="NoCodeInFile"/>
    <module name="NoEnumTrailingComma">
      <!-- This Check is conflicting with our vision of code
           to be same as ArrayTrailingComma requires it -->
      <property name="severity" value="ignore"/>
    </module>
    <module name="NoFinalizer"/>
    <module name="OneStatementPerLine"/>
    <module name="OverloadMethodsDeclarationOrder"/>
    <module name="PackageDeclaration"/>
    <module name="ParameterAssignment"/>
    <module name="RequireThis"/>
    <module name="ReturnCount">
      <property name="max" value="1"/>
      <property name="maxForVoid" value="0"/>
    </module>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="StringLiteralEquality"/>
    <module name="SuperClone"/>
    <module name="SuperFinalize"/>
    <module name="UnnecessaryParentheses">
      <property name="tokens"
                value="EXPR, IDENT, NUM_DOUBLE, NUM_FLOAT, NUM_INT, NUM_LONG, STRING_LITERAL,
                       LITERAL_NULL, LITERAL_FALSE, LITERAL_TRUE, ASSIGN, BAND_ASSIGN, BOR_ASSIGN,
                       BSR_ASSIGN, BXOR_ASSIGN, DIV_ASSIGN, MINUS_ASSIGN, MOD_ASSIGN, PLUS_ASSIGN,
                       SL_ASSIGN, SR_ASSIGN, STAR_ASSIGN, LAMBDA, TEXT_BLOCK_LITERAL_BEGIN, LAND,
                       LOR, LITERAL_INSTANCEOF, GT, LT, GE, LE, EQUAL, NOT_EQUAL, UNARY_MINUS,
                       UNARY_PLUS, INC, DEC, LNOT, BNOT, POST_INC, POST_DEC, BOR, BXOR, BAND"/>
    </module>
    <module name="UnnecessarySemicolonAfterOuterTypeDeclaration"/>
    <module name="UnnecessarySemicolonAfterTypeMemberDeclaration"/>
    <module name="UnnecessarySemicolonInEnumeration"/>
    <module name="UnnecessarySemicolonInTryWithResources"/>
    <module name="UnusedLocalVariable"/>
    <module name="VariableDeclarationUsageDistance"/>

  </module>

</module>